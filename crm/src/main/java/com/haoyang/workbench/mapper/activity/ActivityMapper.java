package com.haoyang.workbench.mapper.activity;

import com.haoyang.workbench.pojo.Activity;
import com.haoyang.workbench.pojo.FunnelVO;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Aug 02 16:26:25 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Aug 02 16:26:25 CST 2022
     */
    int insert(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Aug 02 16:26:25 CST 2022
     */
    int insertSelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Aug 02 16:26:25 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Aug 02 16:26:25 CST 2022
     */
    int updateByPrimaryKeySelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Aug 02 16:26:25 CST 2022
     */
    int updateByPrimaryKey(Activity row);

    /**
     * 新增添加的市场活动
     * @param activity 创建的市场活动
     * @return 插入数据的条数
     */
    int insertActivity(Activity activity);
    /**
     * 根据条件分页查询市场活动列表
     * @param map 查询条件
     * @return 查询到的市场活动
     */
    List<Activity> selectActivityByConditionForPage(Map<String , Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map 查询条件
     * @return 市场活动总条数
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据id批量删除市场活动
     * @param ids 需要删除的市场活动
     * @return 删除的条数
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动
     * @param id 市场活动id
     * @return 市场活动
     */
    Activity selectActivityById(String id);

    /**
     * 修改市场活动
     * @param activity 要修改的市场活动
     * @return 修改的条数
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return  市场活动集合
     */
    List<Activity> selectAllActivity();

    /**
     * 查询所有被选中的市场活动
     * @param id 被选中的市场活动id
     * @return 选中市场活动的列表
     */
    List<Activity> selectCheckedActivity(String[] id);

    /**
     * 批量新增创建的市场活动
     * @param activityList 市场活动集合
     * @return 新增的条数
     */
//    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查找对应市场活动明细
     * @param id 对应id
     * @return 市场活动明细
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据clueId查询线索相关联的市场活动信息
     * @param clueId 线索对应的id
     * @return 线索对应市场活动集合
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 通过市场活动名和线索id模糊查询市场活动（线索转换查询未绑定的市场活动）
     * 根据name模糊查询市场活动，并且把已经跟clueId关联过的市场活动排除
     * @param map 封装的线索id和市场活动名参数
     * @return 市场活动集合
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     * 根据ids查询市场活动的信息
     * 关联成功之后，为了刷新已经关联过的市场活动列表，调用该方法
     * @param ids 市场活动id
     * @return 市场活动集合
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 通过市场活动名和线索id模糊查询市场活动
     * @param map 封装的线索id和市场活动名参数
     * @return 市场活动集合
     */
    List<Activity> selectActivityForConvertByNameAndClueId(Map<String, Object> map);

    /**
     * 通过市场活动名称进行模糊查询
     * @param activityName 市场活动模糊名称
     * @return 查询到的对应的市场活动
     */
    List<Activity> selectActivityByFuzzyName(String activityName);


    /**
     * 查询市场活动表中各个所有者的数据量
     * @return 数据集合
     */
    List<FunnelVO> selectCountOfActivityGroupByOwner();
}